import pandas as pd

"""
Description:
    Provides various utility functions to manipulate pandas dataframes.
"""
    
#--------------------------------------------------------------------------------------------------------------------------------------
# fromFile Method
#--------------------------------------------------------------------------------------------------------------------------------------
def fromFile(filePath: str):
    print("\nConstructing DataFrame from file: \n'" + filePath + "'")
    return pd.read_csv(filePath)

#--------------------------------------------------------------------------------------------------------------------------------------
# fromDict Method
#--------------------------------------------------------------------------------------------------------------------------------------
def fromDict(columnNames: list = []):
    return pd.DataFrame(columns=columnNames)

#--------------------------------------------------------------------------------------------------------------------------------------
# rowCount Method
#--------------------------------------------------------------------------------------------------------------------------------------
def rowCount(df) -> int:
    return len(df.index)

#--------------------------------------------------------------------------------------------------------------------------------------
# appendDataSet Method
#--------------------------------------------------------------------------------------------------------------------------------------
def appendDataSet(df_top, df_bottom):
    return df_top.append(df_bottom)

#--------------------------------------------------------------------------------------------------------------------------------------
# filterData Method
#--------------------------------------------------------------------------------------------------------------------------------------
def filterData(df, columnName: str, value):
    return df.loc[df[columnName] == value]

#--------------------------------------------------------------------------------------------------------------------------------------
# convertColumn Method
#--------------------------------------------------------------------------------------------------------------------------------------
def convertColumn(df, T, columnName: str):
    df[columnName].astype(T, inplace=True)
    return df

#--------------------------------------------------------------------------------------------------------------------------------------
# convertAllColumns Method
#--------------------------------------------------------------------------------------------------------------------------------------
def convertAllColumns(df, T, exclude: list = []):
    for colName in df.columns.values:
        if colName not in exclude:
            df = convertColumn(df, T, colName)
    return df

#--------------------------------------------------------------------------------------------------------------------------------------
# convertNullValues Method
#--------------------------------------------------------------------------------------------------------------------------------------     
def convertNullValues(df, columnName: str, value):
    return df[columnName].fillna(value)

#--------------------------------------------------------------------------------------------------------------------------------------
# concatenateRow Method
#--------------------------------------------------------------------------------------------------------------------------------------
def concatenateRow(df, index: int = 0, delimiter: str = ',', dropColumns: list = None) -> str:
    row = df.iloc[index]
    
    if dropColumns != None:
        row = row.drop(dropColumns)
        
    tokens = row.tolist()
    tokens = [str(token) for token in tokens]
    return delimiter.join(tokens)

#--------------------------------------------------------------------------------------------------------------------------------------
# addRow Method
#--------------------------------------------------------------------------------------------------------------------------------------
def addRow(df, row: list = []):
    df.loc[rowCount(df)] = row
    return df
    
#--------------------------------------------------------------------------------------------------------------------------------------
# removeRow Method
#--------------------------------------------------------------------------------------------------------------------------------------
def removeRow(df, index: int):
    return df.drop(index)

#--------------------------------------------------------------------------------------------------------------------------------------
# addColumn Method
#--------------------------------------------------------------------------------------------------------------------------------------
def addColumn(df, name: str, value):
    df[name] = value
    return df
    
#--------------------------------------------------------------------------------------------------------------------------------------
# removeColumn Method
#--------------------------------------------------------------------------------------------------------------------------------------
def removeColumn(df, name: str):
    return df.drop(columns=[name])

#--------------------------------------------------------------------------------------------------------------------------------------
# cellValue Method
#--------------------------------------------------------------------------------------------------------------------------------------
def cellValue(df, columnName: str, rowIndex: int = 0):
    return df.iloc[rowIndex][columnName]

#--------------------------------------------------------------------------------------------------------------------------------------
# generateFile Method
#--------------------------------------------------------------------------------------------------------------------------------------
def generateFile(df, outputFilePath: str, index: bool = False):
    print("\nGenerating file: \n'" + outputFilePath + "' ...")
    df.to_csv(outputFilePath, encoding='utf-8', index=index)       
    
            